# Docker Compose para QuizLiftOff
version: '3.8'

services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quizliftoff-app
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx-logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - quizliftoff-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.quizliftoff.rule=Host(`yourdomain.com`)"
      - "traefik.http.routers.quizliftoff.tls=true"
      - "traefik.http.routers.quizliftoff.tls.certresolver=letsencrypt"

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: quizliftoff-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - quizliftoff-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: quizliftoff-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - quizliftoff-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quizliftoff-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - quizliftoff-network
    depends_on:
      - prometheus

  # Node Exporter para métricas do sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: quizliftoff-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - quizliftoff-network

  # Nginx Exporter para métricas do Nginx
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: quizliftoff-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://app:80/nginx_status'
    restart: unless-stopped
    networks:
      - quizliftoff-network
    depends_on:
      - app

  # Backup automático
  backup:
    image: alpine:latest
    container_name: quizliftoff-backup
    volumes:
      - ./backups:/backups
      - redis-data:/data/redis:ro
      - ./scripts/backup.sh:/backup.sh
    command: |
      sh -c '
        apk add --no-cache dcron
        echo "0 2 * * * /backup.sh" | crontab -
        crond -f
      '
    restart: unless-stopped
    networks:
      - quizliftoff-network
    depends_on:
      - redis

# Volumes persistentes
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Rede personalizada
networks:
  quizliftoff-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16