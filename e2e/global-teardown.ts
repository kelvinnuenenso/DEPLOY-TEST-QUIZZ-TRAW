import { chromium, FullConfig } from '@playwright/test';

async function globalTeardown(config: FullConfig) {
  console.log('üßπ Iniciando limpeza global dos testes E2E...');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    // Fazer login como usu√°rio de teste
    await page.goto('http://localhost:5173/login');
    await page.getByPlaceholder('Email').fill('test@example.com');
    await page.getByPlaceholder('Senha').fill('password123');
    await page.getByRole('button', { name: 'Entrar' }).click();
    
    const isLoggedIn = await page.waitForURL(/.*dashboard/, { timeout: 5000 }).catch(() => false);
    
    if (isLoggedIn) {
      // Limpar dados de teste criados durante os testes
      await cleanupTestData(page);
    }
    
    console.log('‚úÖ Limpeza global conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro na limpeza global:', error);
    // N√£o falhar os testes por causa de erro na limpeza
  } finally {
    await browser.close();
  }
}

async function cleanupTestData(page: any) {
  try {
    // Ir para lista de quizzes
    await page.goto('/dashboard');
    await page.getByText('Meus Quizzes').click();
    
    // Excluir quizzes de teste criados durante os testes
    const testQuizTitles = [
      'Quiz de Teste E2E',
      'Quiz Editado E2E',
      'C√≥pia de Quiz Editado E2E',
      'Quiz Tempor√°rio para Teste'
    ];
    
    for (const title of testQuizTitles) {
      try {
        const quizElement = page.getByText(title).first();
        const isVisible = await quizElement.isVisible().catch(() => false);
        
        if (isVisible) {
          console.log(`Excluindo quiz: ${title}`);
          
          // Hover sobre o quiz e abrir menu
          await quizElement.hover();
          await page.getByTestId('quiz-menu').first().click();
          await page.getByText('Excluir').click();
          
          // Confirmar exclus√£o
          await page.getByRole('button', { name: 'Confirmar' }).click();
          
          // Aguardar confirma√ß√£o
          await page.waitForSelector('[data-testid="success-message"]', { timeout: 5000 });
          
          console.log(`‚úÖ Quiz "${title}" exclu√≠do`);
        }
      } catch (error) {
        console.log(`‚ÑπÔ∏è Quiz "${title}" n√£o encontrado ou j√° exclu√≠do`);
      }
    }
    
    // Limpar dados de leads de teste
    await cleanupTestLeads(page);
    
    // Limpar configura√ß√µes de teste
    await cleanupTestSettings(page);
    
  } catch (error) {
    console.log('‚ÑπÔ∏è Erro na limpeza de dados (esperado):', error.message);
  }
}

async function cleanupTestLeads(page: any) {
  try {
    // Navegar para p√°gina de leads
    await page.goto('/leads');
    
    // Verificar se existem leads de teste
    const testLeadEmails = [
      'joao@example.com',
      'teste@example.com',
      'lead-teste@example.com'
    ];
    
    for (const email of testLeadEmails) {
      try {
        const leadElement = page.getByText(email).first();
        const isVisible = await leadElement.isVisible().catch(() => false);
        
        if (isVisible) {
          console.log(`Excluindo lead: ${email}`);
          
          // Selecionar e excluir lead
          await leadElement.click();
          await page.getByRole('button', { name: 'Excluir' }).click();
          await page.getByRole('button', { name: 'Confirmar' }).click();
          
          console.log(`‚úÖ Lead "${email}" exclu√≠do`);
        }
      } catch (error) {
        console.log(`‚ÑπÔ∏è Lead "${email}" n√£o encontrado`);
      }
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è P√°gina de leads n√£o acess√≠vel ou erro esperado');
  }
}

async function cleanupTestSettings(page: any) {
  try {
    // Resetar configura√ß√µes de teste se necess√°rio
    await page.goto('/settings');
    
    // Verificar se existem configura√ß√µes de teste para limpar
    const hasTestSettings = await page.getByText('Configura√ß√£o de Teste').isVisible().catch(() => false);
    
    if (hasTestSettings) {
      console.log('Limpando configura√ß√µes de teste...');
      
      // Resetar para configura√ß√µes padr√£o
      await page.getByRole('button', { name: 'Resetar para Padr√£o' }).click();
      await page.getByRole('button', { name: 'Confirmar' }).click();
      
      console.log('‚úÖ Configura√ß√µes resetadas');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Configura√ß√µes j√° est√£o no padr√£o ou erro esperado');
  }
}

export default globalTeardown;